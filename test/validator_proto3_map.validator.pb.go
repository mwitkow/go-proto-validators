// Code generated by protoc-gen-govalidators. DO NOT EDIT.

package validatortest

import (
	errors "errors"
	go_proto_validators "github.com/mwitkow/go-proto-validators"
	regexp "regexp"
)

func (m *ValueType) Validate() error {
	if string(m.GetSomething()) == "" {
		return go_proto_validators.FieldError("Something", errors.New("something should not be empty"))
	}

	return nil
}

func (m *ValidatorMapMessage3_NestedType) Validate() error {
	return nil
}

var ValidatorMapMessage3SomeStringMapRE = regexp.MustCompile(`^[a-z]{2,5}$`)

func (m *ValidatorMapMessage3) Validate() error {
	for _, item := range m.GetSomeStringMap() {
		if !ValidatorMapMessage3SomeStringMapRE.MatchString(string(item)) {
			return go_proto_validators.FieldError("SomeStringMap", errors.New(`SomeStringMap should match regular expression "^[a-z]{2,5}$"`))
		}
	}

	for _, item := range m.GetSomeExtMap() {
		if item != nil {
			if err := go_proto_validators.CallValidatorIfExists(item); err != nil {
				return go_proto_validators.FieldError("SomeExtMap", err)
			}
		}
	}

	for _, item := range m.GetSomeNestedMap() {
		if item != nil {
			if err := go_proto_validators.CallValidatorIfExists(item); err != nil {
				return go_proto_validators.FieldError("SomeNestedMap", err)
			}
		}
		if item == nil {
			return go_proto_validators.FieldError("SomeNestedMap", errors.New("SomeNestedMap should be set"))
		}
	}

	return nil
}
