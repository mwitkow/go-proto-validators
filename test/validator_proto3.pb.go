// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.12.3
// source: test/validator_proto3.proto

package validatortest

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EnumProto3 int32

const (
	EnumProto3_alpha3 EnumProto3 = 0
	EnumProto3_beta3  EnumProto3 = 1
)

// Enum value maps for EnumProto3.
var (
	EnumProto3_name = map[int32]string{
		0: "alpha3",
		1: "beta3",
	}
	EnumProto3_value = map[string]int32{
		"alpha3": 0,
		"beta3":  1,
	}
)

func (x EnumProto3) Enum() *EnumProto3 {
	p := new(EnumProto3)
	*p = x
	return p
}

func (x EnumProto3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumProto3) Descriptor() protoreflect.EnumDescriptor {
	return file_test_validator_proto3_proto_enumTypes[0].Descriptor()
}

func (EnumProto3) Type() protoreflect.EnumType {
	return &file_test_validator_proto3_proto_enumTypes[0]
}

func (x EnumProto3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumProto3.Descriptor instead.
func (EnumProto3) EnumDescriptor() ([]byte, []int) {
	return file_test_validator_proto3_proto_rawDescGZIP(), []int{0}
}

type ValidatorMessage3_EmbeddedEnum int32

const (
	ValidatorMessage3_zero ValidatorMessage3_EmbeddedEnum = 0
	ValidatorMessage3_one  ValidatorMessage3_EmbeddedEnum = 1
)

// Enum value maps for ValidatorMessage3_EmbeddedEnum.
var (
	ValidatorMessage3_EmbeddedEnum_name = map[int32]string{
		0: "zero",
		1: "one",
	}
	ValidatorMessage3_EmbeddedEnum_value = map[string]int32{
		"zero": 0,
		"one":  1,
	}
)

func (x ValidatorMessage3_EmbeddedEnum) Enum() *ValidatorMessage3_EmbeddedEnum {
	p := new(ValidatorMessage3_EmbeddedEnum)
	*p = x
	return p
}

func (x ValidatorMessage3_EmbeddedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidatorMessage3_EmbeddedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_test_validator_proto3_proto_enumTypes[1].Descriptor()
}

func (ValidatorMessage3_EmbeddedEnum) Type() protoreflect.EnumType {
	return &file_test_validator_proto3_proto_enumTypes[1]
}

func (x ValidatorMessage3_EmbeddedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidatorMessage3_EmbeddedEnum.Descriptor instead.
func (ValidatorMessage3_EmbeddedEnum) EnumDescriptor() ([]byte, []int) {
	return file_test_validator_proto3_proto_rawDescGZIP(), []int{0, 0}
}

type ValidatorMessage3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeString                 string                               `protobuf:"bytes,1,opt,name=SomeString,proto3" json:"SomeString,omitempty"`
	SomeStringRep              []string                             `protobuf:"bytes,2,rep,name=SomeStringRep,proto3" json:"SomeStringRep,omitempty"`
	SomeStringNoQuotes         string                               `protobuf:"bytes,3,opt,name=SomeStringNoQuotes,proto3" json:"SomeStringNoQuotes,omitempty"`
	SomeStringUnescaped        string                               `protobuf:"bytes,4,opt,name=SomeStringUnescaped,proto3" json:"SomeStringUnescaped,omitempty"`
	SomeInt                    uint32                               `protobuf:"varint,5,opt,name=SomeInt,proto3" json:"SomeInt,omitempty"`
	SomeIntRep                 []uint32                             `protobuf:"varint,6,rep,packed,name=SomeIntRep,proto3" json:"SomeIntRep,omitempty"`
	SomeEmbedded               *ValidatorMessage3_EmbeddedMessage   `protobuf:"bytes,7,opt,name=SomeEmbedded,proto3" json:"SomeEmbedded,omitempty"`
	SomeEmbeddedExists         *ValidatorMessage3_EmbeddedMessage   `protobuf:"bytes,8,opt,name=SomeEmbeddedExists,proto3" json:"SomeEmbeddedExists,omitempty"`
	SomeEmbeddedRep            []*ValidatorMessage3_EmbeddedMessage `protobuf:"bytes,9,rep,name=SomeEmbeddedRep,proto3" json:"SomeEmbeddedRep,omitempty"`
	CustomErrorInt             int32                                `protobuf:"varint,10,opt,name=CustomErrorInt,proto3" json:"CustomErrorInt,omitempty"`
	StrictSomeDouble           float64                              `protobuf:"fixed64,11,opt,name=StrictSomeDouble,proto3" json:"StrictSomeDouble,omitempty"`
	StrictSomeDoubleRep        []float64                            `protobuf:"fixed64,12,rep,packed,name=StrictSomeDoubleRep,proto3" json:"StrictSomeDoubleRep,omitempty"`
	StrictSomeDoubleRepNonNull []float64                            `protobuf:"fixed64,13,rep,packed,name=StrictSomeDoubleRepNonNull,proto3" json:"StrictSomeDoubleRepNonNull,omitempty"`
	StrictSomeFloat            float32                              `protobuf:"fixed32,14,opt,name=StrictSomeFloat,proto3" json:"StrictSomeFloat,omitempty"`
	StrictSomeFloatRep         []float32                            `protobuf:"fixed32,15,rep,packed,name=StrictSomeFloatRep,proto3" json:"StrictSomeFloatRep,omitempty"`
	StrictSomeFloatRepNonNull  []float32                            `protobuf:"fixed32,16,rep,packed,name=StrictSomeFloatRepNonNull,proto3" json:"StrictSomeFloatRepNonNull,omitempty"`
	SomeDouble                 float64                              `protobuf:"fixed64,17,opt,name=SomeDouble,proto3" json:"SomeDouble,omitempty"`
	SomeDoubleRep              []float64                            `protobuf:"fixed64,18,rep,packed,name=SomeDoubleRep,proto3" json:"SomeDoubleRep,omitempty"`
	SomeFloat                  float32                              `protobuf:"fixed32,19,opt,name=SomeFloat,proto3" json:"SomeFloat,omitempty"`
	SomeFloatRep               []float32                            `protobuf:"fixed32,20,rep,packed,name=SomeFloatRep,proto3" json:"SomeFloatRep,omitempty"`
	SomeNonEmptyString         string                               `protobuf:"bytes,21,opt,name=SomeNonEmptyString,proto3" json:"SomeNonEmptyString,omitempty"`
	RepeatedBaseType           []int32                              `protobuf:"varint,22,rep,packed,name=RepeatedBaseType,proto3" json:"RepeatedBaseType,omitempty"`
	Repeated                   []int32                              `protobuf:"varint,23,rep,packed,name=Repeated,proto3" json:"Repeated,omitempty"`
	SomeStringLtReq            string                               `protobuf:"bytes,24,opt,name=SomeStringLtReq,proto3" json:"SomeStringLtReq,omitempty"`
	SomeStringGtReq            string                               `protobuf:"bytes,25,opt,name=SomeStringGtReq,proto3" json:"SomeStringGtReq,omitempty"`
	SomeStringEqReq            string                               `protobuf:"bytes,26,opt,name=SomeStringEqReq,proto3" json:"SomeStringEqReq,omitempty"`
	SomeBytesLtReq             []byte                               `protobuf:"bytes,27,opt,name=SomeBytesLtReq,proto3" json:"SomeBytesLtReq,omitempty"`
	SomeBytesGtReq             []byte                               `protobuf:"bytes,28,opt,name=SomeBytesGtReq,proto3" json:"SomeBytesGtReq,omitempty"`
	SomeBytesEqReq             []byte                               `protobuf:"bytes,29,opt,name=SomeBytesEqReq,proto3" json:"SomeBytesEqReq,omitempty"`
	UUIDAny                    string                               `protobuf:"bytes,30,opt,name=UUIDAny,proto3" json:"UUIDAny,omitempty"`
	UUID4NotEmpty              string                               `protobuf:"bytes,31,opt,name=UUID4NotEmpty,proto3" json:"UUID4NotEmpty,omitempty"`
	SomeEnum                   EnumProto3                           `protobuf:"varint,32,opt,name=someEnum,proto3,enum=validatortest.EnumProto3" json:"someEnum,omitempty"`
	SomeEmbeddedEnum           ValidatorMessage3_EmbeddedEnum       `protobuf:"varint,33,opt,name=someEmbeddedEnum,proto3,enum=validatortest.ValidatorMessage3_EmbeddedEnum" json:"someEmbeddedEnum,omitempty"`
}

func (x *ValidatorMessage3) Reset() {
	*x = ValidatorMessage3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_validator_proto3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorMessage3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorMessage3) ProtoMessage() {}

func (x *ValidatorMessage3) ProtoReflect() protoreflect.Message {
	mi := &file_test_validator_proto3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorMessage3.ProtoReflect.Descriptor instead.
func (*ValidatorMessage3) Descriptor() ([]byte, []int) {
	return file_test_validator_proto3_proto_rawDescGZIP(), []int{0}
}

func (x *ValidatorMessage3) GetSomeString() string {
	if x != nil {
		return x.SomeString
	}
	return ""
}

func (x *ValidatorMessage3) GetSomeStringRep() []string {
	if x != nil {
		return x.SomeStringRep
	}
	return nil
}

func (x *ValidatorMessage3) GetSomeStringNoQuotes() string {
	if x != nil {
		return x.SomeStringNoQuotes
	}
	return ""
}

func (x *ValidatorMessage3) GetSomeStringUnescaped() string {
	if x != nil {
		return x.SomeStringUnescaped
	}
	return ""
}

func (x *ValidatorMessage3) GetSomeInt() uint32 {
	if x != nil {
		return x.SomeInt
	}
	return 0
}

func (x *ValidatorMessage3) GetSomeIntRep() []uint32 {
	if x != nil {
		return x.SomeIntRep
	}
	return nil
}

func (x *ValidatorMessage3) GetSomeEmbedded() *ValidatorMessage3_EmbeddedMessage {
	if x != nil {
		return x.SomeEmbedded
	}
	return nil
}

func (x *ValidatorMessage3) GetSomeEmbeddedExists() *ValidatorMessage3_EmbeddedMessage {
	if x != nil {
		return x.SomeEmbeddedExists
	}
	return nil
}

func (x *ValidatorMessage3) GetSomeEmbeddedRep() []*ValidatorMessage3_EmbeddedMessage {
	if x != nil {
		return x.SomeEmbeddedRep
	}
	return nil
}

func (x *ValidatorMessage3) GetCustomErrorInt() int32 {
	if x != nil {
		return x.CustomErrorInt
	}
	return 0
}

func (x *ValidatorMessage3) GetStrictSomeDouble() float64 {
	if x != nil {
		return x.StrictSomeDouble
	}
	return 0
}

func (x *ValidatorMessage3) GetStrictSomeDoubleRep() []float64 {
	if x != nil {
		return x.StrictSomeDoubleRep
	}
	return nil
}

func (x *ValidatorMessage3) GetStrictSomeDoubleRepNonNull() []float64 {
	if x != nil {
		return x.StrictSomeDoubleRepNonNull
	}
	return nil
}

func (x *ValidatorMessage3) GetStrictSomeFloat() float32 {
	if x != nil {
		return x.StrictSomeFloat
	}
	return 0
}

func (x *ValidatorMessage3) GetStrictSomeFloatRep() []float32 {
	if x != nil {
		return x.StrictSomeFloatRep
	}
	return nil
}

func (x *ValidatorMessage3) GetStrictSomeFloatRepNonNull() []float32 {
	if x != nil {
		return x.StrictSomeFloatRepNonNull
	}
	return nil
}

func (x *ValidatorMessage3) GetSomeDouble() float64 {
	if x != nil {
		return x.SomeDouble
	}
	return 0
}

func (x *ValidatorMessage3) GetSomeDoubleRep() []float64 {
	if x != nil {
		return x.SomeDoubleRep
	}
	return nil
}

func (x *ValidatorMessage3) GetSomeFloat() float32 {
	if x != nil {
		return x.SomeFloat
	}
	return 0
}

func (x *ValidatorMessage3) GetSomeFloatRep() []float32 {
	if x != nil {
		return x.SomeFloatRep
	}
	return nil
}

func (x *ValidatorMessage3) GetSomeNonEmptyString() string {
	if x != nil {
		return x.SomeNonEmptyString
	}
	return ""
}

func (x *ValidatorMessage3) GetRepeatedBaseType() []int32 {
	if x != nil {
		return x.RepeatedBaseType
	}
	return nil
}

func (x *ValidatorMessage3) GetRepeated() []int32 {
	if x != nil {
		return x.Repeated
	}
	return nil
}

func (x *ValidatorMessage3) GetSomeStringLtReq() string {
	if x != nil {
		return x.SomeStringLtReq
	}
	return ""
}

func (x *ValidatorMessage3) GetSomeStringGtReq() string {
	if x != nil {
		return x.SomeStringGtReq
	}
	return ""
}

func (x *ValidatorMessage3) GetSomeStringEqReq() string {
	if x != nil {
		return x.SomeStringEqReq
	}
	return ""
}

func (x *ValidatorMessage3) GetSomeBytesLtReq() []byte {
	if x != nil {
		return x.SomeBytesLtReq
	}
	return nil
}

func (x *ValidatorMessage3) GetSomeBytesGtReq() []byte {
	if x != nil {
		return x.SomeBytesGtReq
	}
	return nil
}

func (x *ValidatorMessage3) GetSomeBytesEqReq() []byte {
	if x != nil {
		return x.SomeBytesEqReq
	}
	return nil
}

func (x *ValidatorMessage3) GetUUIDAny() string {
	if x != nil {
		return x.UUIDAny
	}
	return ""
}

func (x *ValidatorMessage3) GetUUID4NotEmpty() string {
	if x != nil {
		return x.UUID4NotEmpty
	}
	return ""
}

func (x *ValidatorMessage3) GetSomeEnum() EnumProto3 {
	if x != nil {
		return x.SomeEnum
	}
	return EnumProto3_alpha3
}

func (x *ValidatorMessage3) GetSomeEmbeddedEnum() ValidatorMessage3_EmbeddedEnum {
	if x != nil {
		return x.SomeEmbeddedEnum
	}
	return ValidatorMessage3_zero
}

type ValidatorMessage3_EmbeddedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	SomeValue  int64  `protobuf:"varint,2,opt,name=SomeValue,proto3" json:"SomeValue,omitempty"`
}

func (x *ValidatorMessage3_EmbeddedMessage) Reset() {
	*x = ValidatorMessage3_EmbeddedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_validator_proto3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorMessage3_EmbeddedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorMessage3_EmbeddedMessage) ProtoMessage() {}

func (x *ValidatorMessage3_EmbeddedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_validator_proto3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorMessage3_EmbeddedMessage.ProtoReflect.Descriptor instead.
func (*ValidatorMessage3_EmbeddedMessage) Descriptor() ([]byte, []int) {
	return file_test_validator_proto3_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ValidatorMessage3_EmbeddedMessage) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ValidatorMessage3_EmbeddedMessage) GetSomeValue() int64 {
	if x != nil {
		return x.SomeValue
	}
	return 0
}

var File_test_validator_proto3_proto protoreflect.FileDescriptor

var file_test_validator_proto3_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77,
	0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x11, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x12, 0x2e, 0x0a, 0x0a, 0x53,
	0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x0a, 0x08, 0x5e, 0x2e, 0x7b, 0x32, 0x2c, 0x35, 0x7d, 0x24, 0x52,
	0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0d, 0x53,
	0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x0a, 0x08, 0x5e, 0x2e, 0x7b, 0x32, 0x2c, 0x35,
	0x7d, 0x24, 0x52, 0x0d, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x70, 0x12, 0x41, 0x0a, 0x12, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe2,
	0xdf, 0x1f, 0x0d, 0x0a, 0x0b, 0x5e, 0x5b, 0x5e, 0x22, 0x5d, 0x7b, 0x32, 0x2c, 0x35, 0x7d, 0x24,
	0x52, 0x12, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x13, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x37, 0xe2, 0xdf, 0x1f, 0x33, 0x0a, 0x31, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c,
	0x70, 0x7b, 0x4e, 0x7d, 0x5d, 0x28, 0x7b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x4e,
	0x7d, 0x5f, 0x2d, 0x20, 0x5d, 0x7b, 0x30, 0x2c, 0x32, 0x38, 0x7d, 0x5b, 0x5c, 0x70, 0x7b, 0x4c,
	0x7d, 0x5c, 0x70, 0x7b, 0x4e, 0x7d, 0x5d, 0x29, 0x3f, 0x2e, 0x52, 0x13, 0x53, 0x6f, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x07, 0x53, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x0a, 0x52, 0x07, 0x53, 0x6f, 0x6d, 0x65, 0x49, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x0a, 0x52, 0x0a, 0x53,
	0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x12, 0x54, 0x0a, 0x0c, 0x53, 0x6f, 0x6d,
	0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x33, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0c, 0x53, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12,
	0x68, 0x0a, 0x12, 0x53, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x12, 0x53, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x53, 0x6f, 0x6d,
	0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x70, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x33, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x53, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0xe2,
	0xdf, 0x1f, 0x13, 0x18, 0x0a, 0x2a, 0x0f, 0x4d, 0x79, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x31, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xd6, 0x3f, 0x39,
	0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xe4, 0x3f, 0x41, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xa9,
	0x3f, 0x52, 0x10, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x01,
	0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x31, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xd6, 0x3f, 0x39,
	0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xe4, 0x3f, 0x41, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xa9,
	0x3f, 0x52, 0x13, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x12, 0x5f, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x4e, 0x6f, 0x6e,
	0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x01, 0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b,
	0x31, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xd6, 0x3f, 0x39, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
	0xe4, 0x3f, 0x41, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xa9, 0x3f, 0x52, 0x1a, 0x53, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x4e, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x31, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xd6, 0x3f, 0x39,
	0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xe4, 0x3f, 0x41, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xa9,
	0x3f, 0x52, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x6f, 0x6d, 0x65,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x02, 0x42, 0x1f,
	0xe2, 0xdf, 0x1f, 0x1b, 0x31, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xd6, 0x3f, 0x39, 0xcd, 0xcc,
	0xcc, 0xcc, 0xcc, 0xcc, 0xe4, 0x3f, 0x41, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xa9, 0x3f, 0x52,
	0x12, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x52, 0x65, 0x70, 0x12, 0x5d, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x70, 0x4e, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x02, 0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x31, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0xd6, 0x3f, 0x39, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xe4, 0x3f, 0x41, 0x9a,
	0x99, 0x99, 0x99, 0x99, 0x99, 0xa9, 0x3f, 0x52, 0x19, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53,
	0x6f, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x70, 0x4e, 0x6f, 0x6e, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x49, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xd0, 0x3f, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x3f, 0x52, 0x0a,
	0x53, 0x6f, 0x6d, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x53, 0x6f,
	0x6d, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x01, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x3f,
	0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x3f, 0x52, 0x0d, 0x53, 0x6f, 0x6d, 0x65, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x6f, 0x6d, 0x65,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x42, 0x16, 0xe2, 0xdf, 0x1f,
	0x12, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x3f, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xe8, 0x3f, 0x52, 0x09, 0x53, 0x6f, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x3a,
	0x0a, 0x0c, 0x53, 0x6f, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x70, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x02, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xd0, 0x3f, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x3f, 0x52, 0x0c, 0x53, 0x6f,
	0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x70, 0x12, 0x36, 0x0a, 0x12, 0x53, 0x6f,
	0x6d, 0x65, 0x4e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x12,
	0x53, 0x6f, 0x6d, 0x65, 0x4e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x08, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05,
	0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x60, 0x02, 0x68, 0x05, 0x52, 0x08, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0f, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x74, 0x52, 0x65, 0x71, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x70, 0x02, 0x52, 0x0f, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x0f, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x47, 0x74, 0x52, 0x65, 0x71, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x0c, 0x52, 0x0f, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x47, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x0f, 0x53, 0x6f, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x52, 0x65, 0x71, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x0a, 0x52, 0x0f, 0x53, 0x6f, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0e, 0x53,
	0x6f, 0x6d, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x74, 0x52, 0x65, 0x71, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x05, 0x52, 0x0e, 0x53, 0x6f, 0x6d,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0e, 0x53,
	0x6f, 0x6d, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x47, 0x74, 0x52, 0x65, 0x71, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x78, 0x14, 0x52, 0x0e, 0x53, 0x6f, 0x6d,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x47, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x0e, 0x53,
	0x6f, 0x6d, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x71, 0x52, 0x65, 0x71, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x0c, 0x52, 0x0e, 0x53, 0x6f,
	0x6d, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x71, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x07,
	0x55, 0x55, 0x49, 0x44, 0x41, 0x6e, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2,
	0xdf, 0x1f, 0x03, 0x90, 0x01, 0x00, 0x52, 0x07, 0x55, 0x55, 0x49, 0x44, 0x41, 0x6e, 0x79, 0x12,
	0x2d, 0x0a, 0x0d, 0x55, 0x55, 0x49, 0x44, 0x34, 0x4e, 0x6f, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x90, 0x01, 0x04, 0x52,
	0x0d, 0x55, 0x55, 0x49, 0x44, 0x34, 0x4e, 0x6f, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e,
	0x0a, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x42, 0x07, 0xe2, 0xdf, 0x1f,
	0x03, 0x88, 0x01, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x62,
	0x0a, 0x10, 0x73, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x88, 0x01, 0x01,
	0x52, 0x10, 0x73, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x1a, 0x6d, 0x0a, 0x0f, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x0a,
	0x0c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x32, 0x2c, 0x35, 0x7d, 0x24, 0x52, 0x0a, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x53, 0x6f, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xe2, 0xdf,
	0x1f, 0x04, 0x10, 0x00, 0x18, 0x64, 0x52, 0x09, 0x53, 0x6f, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x21, 0x0a, 0x0c, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x08, 0x0a, 0x04, 0x7a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x6f,
	0x6e, 0x65, 0x10, 0x01, 0x2a, 0x23, 0x0a, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x33, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x62, 0x65, 0x74, 0x61, 0x33, 0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_test_validator_proto3_proto_rawDescOnce sync.Once
	file_test_validator_proto3_proto_rawDescData = file_test_validator_proto3_proto_rawDesc
)

func file_test_validator_proto3_proto_rawDescGZIP() []byte {
	file_test_validator_proto3_proto_rawDescOnce.Do(func() {
		file_test_validator_proto3_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_validator_proto3_proto_rawDescData)
	})
	return file_test_validator_proto3_proto_rawDescData
}

var file_test_validator_proto3_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_test_validator_proto3_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_test_validator_proto3_proto_goTypes = []interface{}{
	(EnumProto3)(0),                           // 0: validatortest.EnumProto3
	(ValidatorMessage3_EmbeddedEnum)(0),       // 1: validatortest.ValidatorMessage3.EmbeddedEnum
	(*ValidatorMessage3)(nil),                 // 2: validatortest.ValidatorMessage3
	(*ValidatorMessage3_EmbeddedMessage)(nil), // 3: validatortest.ValidatorMessage3.EmbeddedMessage
}
var file_test_validator_proto3_proto_depIdxs = []int32{
	3, // 0: validatortest.ValidatorMessage3.SomeEmbedded:type_name -> validatortest.ValidatorMessage3.EmbeddedMessage
	3, // 1: validatortest.ValidatorMessage3.SomeEmbeddedExists:type_name -> validatortest.ValidatorMessage3.EmbeddedMessage
	3, // 2: validatortest.ValidatorMessage3.SomeEmbeddedRep:type_name -> validatortest.ValidatorMessage3.EmbeddedMessage
	0, // 3: validatortest.ValidatorMessage3.someEnum:type_name -> validatortest.EnumProto3
	1, // 4: validatortest.ValidatorMessage3.someEmbeddedEnum:type_name -> validatortest.ValidatorMessage3.EmbeddedEnum
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_test_validator_proto3_proto_init() }
func file_test_validator_proto3_proto_init() {
	if File_test_validator_proto3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_validator_proto3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorMessage3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_validator_proto3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorMessage3_EmbeddedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_validator_proto3_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_validator_proto3_proto_goTypes,
		DependencyIndexes: file_test_validator_proto3_proto_depIdxs,
		EnumInfos:         file_test_validator_proto3_proto_enumTypes,
		MessageInfos:      file_test_validator_proto3_proto_msgTypes,
	}.Build()
	File_test_validator_proto3_proto = out.File
	file_test_validator_proto3_proto_rawDesc = nil
	file_test_validator_proto3_proto_goTypes = nil
	file_test_validator_proto3_proto_depIdxs = nil
}
