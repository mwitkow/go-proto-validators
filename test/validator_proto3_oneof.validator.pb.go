// Code generated by protoc-gen-govalidators. DO NOT EDIT.

package validatortest

import (
	errors "errors"
	go_proto_validators "github.com/mwitkow/go-proto-validators"
	regexp "regexp"
)

var ExternalMsgIdentifierRE = regexp.MustCompile(`^[a-z]{2,5}$`)

func (m *ExternalMsg) Validate() error {
	if !ExternalMsgIdentifierRE.MatchString(string(m.GetIdentifier())) {
		return go_proto_validators.FieldError("Identifier", errors.New(`Identifier should match regular expression "^[a-z]{2,5}$"`))
	}

	if m.GetSomeValue() <= 0 {
		return go_proto_validators.FieldError("SomeValue", errors.New("SomeValue is not greater than 0"))
	}
	if m.GetSomeValue() >= 100 {
		return go_proto_validators.FieldError("SomeValue", errors.New("SomeValue is not smaller than 100"))
	}

	return nil
}

var OneOfMessage3FiveRegexRE = regexp.MustCompile(`^[a-z]{2,5}$`)

func (m *OneOfMessage3) Validate() error {
	if m.GetSomething() == nil {
		return go_proto_validators.FieldError("Something", errors.New("one of the fields must be set"))
	}

	if m.GetSomeInt() <= 10 {
		return go_proto_validators.FieldError("SomeInt", errors.New("SomeInt is not greater than 10"))
	}

	if _, ok := m.Type.(*OneOfMessage3_OneMsg); ok {
		if m.GetOneMsg() != nil {
			if err := go_proto_validators.CallValidatorIfExists(m.GetOneMsg()); err != nil {
				return go_proto_validators.FieldError("OneMsg", err)
			}
		}
	}

	if _, ok := m.Type.(*OneOfMessage3_OneInt); ok {
		if m.GetOneInt() <= 20 {
			return go_proto_validators.FieldError("OneInt", errors.New("one_int is not greater than 20"))
		}
	}

	if _, ok := m.Type.(*OneOfMessage3_TwoInt); ok {
		if m.GetTwoInt() <= 100 {
			return go_proto_validators.FieldError("TwoInt", errors.New("two_int is not greater than 100"))
		}
	}

	if _, ok := m.Something.(*OneOfMessage3_ThreeInt); ok {
		if m.GetThreeInt() <= 20 {
			return go_proto_validators.FieldError("ThreeInt", errors.New("three_int is not greater than 20"))
		}
	}

	if _, ok := m.Something.(*OneOfMessage3_FourInt); ok {
		if m.GetFourInt() <= 100 {
			return go_proto_validators.FieldError("FourInt", errors.New("four_int is not greater than 100"))
		}
	}

	if _, ok := m.Something.(*OneOfMessage3_FiveRegex); ok {
		if !OneOfMessage3FiveRegexRE.MatchString(string(m.GetFiveRegex())) {
			return go_proto_validators.FieldError("FiveRegex", errors.New(`five_regex should match regular expression "^[a-z]{2,5}$"`))
		}
	}

	return nil
}
