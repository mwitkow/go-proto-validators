// Copyright 2016 Michal Witkowski. All Rights Reserved.
// See LICENSE for licensing terms.

syntax = "proto2";
package validatortest;

import "github.com/mwitkow/go-proto-validators/validators.proto";

// Top-level enum type definition.
enum EnumProto2 {
  alpha2 = 0;
  beta2 = 1;
}

message ValidatorMessage {
  // Embedded message test structure.
  message EmbeddedMessage {
    optional string Identifier = 1
        [ (validator.field) = {regex : "^[a-z]{2,5}$"} ];
    required int64 SomeValue = 2
        [ (validator.field) = {int_gt : 0, int_lt : 100} ];
  }

  // Embedded enum type definition.
  enum EmbeddedEnum {
    zero = 0;
    one = 1;
  }

  // String regex constraint tests.
  required string StringReq = 1 [ (validator.field) = {regex : "^.{2,5}$"} ];
  optional string StringOpt = 2 [ (validator.field) = {regex : "^.{2,5}$"} ];
  required string StringNoQuotes = 3
      [ (validator.field) = {regex : "^[^\"]{2,5}$"} ];
  required string StringUnescaped = 4 [ (validator.field) = {
    regex : "[\\p{L}\\p{N}]({\\p{L}\\p{N}_- ]{0,28}[\\p{L}\\p{N}])?."
  } ];

  // Strict integer inequality constraint tests.
  required uint32 IntReq = 5 [ (validator.field) = {int_gt : 10} ];
  repeated uint32 IntRep = 6 [ (validator.field) = {int_gt : 10} ];

  // Embedded message recursive constraint tests.
  required EmbeddedMessage embeddedReq = 7;
  repeated EmbeddedMessage embeddedRep = 8;

  // Custom error tests.
  optional int32 CustomErrorInt = 9
      [ (validator.field) = {int_gt : 10, human_error : "My Custom Error"} ];

  // Strict floating-point inequality constraint tests.
  // With this epsilon value, the limits become
  //	SomeFloat+0.05 > 0.35
  // 	SomeFloat-0.05 < 0.65
  required double StrictSomeDoubleReq = 10 [
    (validator.field) = {float_gt : 0.35, float_lt : 0.65, float_epsilon : 0.05}
  ];
  repeated double StrictSomeDoubleRep = 11 [
    (validator.field) = {float_gt : 0.35, float_lt : 0.65, float_epsilon : 0.05}
  ];
  required float StrictSomeFloatReq = 12 [
    (validator.field) = {float_gt : 0.35, float_lt : 0.65, float_epsilon : 0.05}
  ];
  repeated float StrictSomeFloatRep = 13 [
    (validator.field) = {float_gt : 0.35, float_lt : 0.65, float_epsilon : 0.05}
  ];

  // Non-strict floating-point inequality constraint tests.
  required double SomeDoubleReq = 14
      [ (validator.field) = {float_gte : 0.25, float_lte : 0.75} ];
  repeated double SomeDoubleRep = 15
      [ (validator.field) = {float_gte : 0.25, float_lte : 0.75} ];
  required float SomeFloatReq = 16
      [ (validator.field) = {float_gte : 0.25, float_lte : 0.75} ];
  repeated float SomeFloatRep = 17
      [ (validator.field) = {float_gte : 0.25, float_lte : 0.75} ];

  // String not-empty constraint tests.
  required string SomeNonEmptyString = 18
      [ (validator.field) = {string_not_empty : true} ];

  // Repeated base-type without constraint tests.
  repeated int32 RepeatedBaseType = 19;

  // Repeated element count constraint tests.
  repeated int32 Repeated = 20
      [ (validator.field) = {repeated_count_min : 2, repeated_count_max : 5} ];

  optional string SomeStringLtReq = 21 [ (validator.field) = {length_gt : 2} ];
  optional string SomeStringGtReq = 22 [ (validator.field) = {length_lt : 12} ];
  optional string SomeStringEqReq = 23 [ (validator.field) = {length_eq : 10} ];
  optional bytes SomeBytesLtReq = 24 [ (validator.field) = {length_gt : 5} ];
  optional bytes SomeBytesGtReq = 25 [ (validator.field) = {length_lt : 20} ];
  optional bytes SomeBytesEqReq = 26 [ (validator.field) = {length_eq : 12} ];

  optional string UUIDAny = 27 [ (validator.field) = {uuid_ver : 0} ];
  required string UUID4NotEmpty = 28 [ (validator.field) = {uuid_ver : 4} ];

  // Enum tests.
  required EnumProto2 someEnum = 29 [ (validator.field) = {is_in_enum : true} ];
  required EmbeddedEnum someEmbeddedEnum = 30
      [ (validator.field) = {is_in_enum : true} ];
}
