// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.12.3
// source: test/validator_proto3_map.proto

package validatortest

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ValueType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Something string `protobuf:"bytes,1,opt,name=something,proto3" json:"something,omitempty"`
}

func (x *ValueType) Reset() {
	*x = ValueType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_validator_proto3_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueType) ProtoMessage() {}

func (x *ValueType) ProtoReflect() protoreflect.Message {
	mi := &file_test_validator_proto3_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueType.ProtoReflect.Descriptor instead.
func (*ValueType) Descriptor() ([]byte, []int) {
	return file_test_validator_proto3_map_proto_rawDescGZIP(), []int{0}
}

func (x *ValueType) GetSomething() string {
	if x != nil {
		return x.Something
	}
	return ""
}

type ValidatorMapMessage3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeStringMap map[string]string                          `protobuf:"bytes,1,rep,name=SomeStringMap,proto3" json:"SomeStringMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SomeExtMap    map[string]*ValueType                      `protobuf:"bytes,2,rep,name=SomeExtMap,proto3" json:"SomeExtMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SomeNestedMap map[int32]*ValidatorMapMessage3_NestedType `protobuf:"bytes,3,rep,name=SomeNestedMap,proto3" json:"SomeNestedMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValidatorMapMessage3) Reset() {
	*x = ValidatorMapMessage3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_validator_proto3_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorMapMessage3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorMapMessage3) ProtoMessage() {}

func (x *ValidatorMapMessage3) ProtoReflect() protoreflect.Message {
	mi := &file_test_validator_proto3_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorMapMessage3.ProtoReflect.Descriptor instead.
func (*ValidatorMapMessage3) Descriptor() ([]byte, []int) {
	return file_test_validator_proto3_map_proto_rawDescGZIP(), []int{1}
}

func (x *ValidatorMapMessage3) GetSomeStringMap() map[string]string {
	if x != nil {
		return x.SomeStringMap
	}
	return nil
}

func (x *ValidatorMapMessage3) GetSomeExtMap() map[string]*ValueType {
	if x != nil {
		return x.SomeExtMap
	}
	return nil
}

func (x *ValidatorMapMessage3) GetSomeNestedMap() map[int32]*ValidatorMapMessage3_NestedType {
	if x != nil {
		return x.SomeNestedMap
	}
	return nil
}

type ValidatorMapMessage3_NestedType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Something string `protobuf:"bytes,1,opt,name=something,proto3" json:"something,omitempty"`
}

func (x *ValidatorMapMessage3_NestedType) Reset() {
	*x = ValidatorMapMessage3_NestedType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_validator_proto3_map_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorMapMessage3_NestedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorMapMessage3_NestedType) ProtoMessage() {}

func (x *ValidatorMapMessage3_NestedType) ProtoReflect() protoreflect.Message {
	mi := &file_test_validator_proto3_map_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorMapMessage3_NestedType.ProtoReflect.Descriptor instead.
func (*ValidatorMapMessage3_NestedType) Descriptor() ([]byte, []int) {
	return file_test_validator_proto3_map_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ValidatorMapMessage3_NestedType) GetSomething() string {
	if x != nil {
		return x.Something
	}
	return ""
}

var File_test_validator_proto3_map_proto protoreflect.FileDescriptor

var file_test_validator_proto3_map_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69,
	0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x09, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0xfc, 0x04, 0x0a,
	0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x33, 0x12, 0x70, 0x0a, 0x0d, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x33, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x0a, 0x0c, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x7b, 0x32, 0x2c, 0x35, 0x7d, 0x24, 0x52, 0x0d, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x53, 0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x45,
	0x78, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33,
	0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x64, 0x0a, 0x0d,
	0x53, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x0d, 0x53, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x61, 0x70, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x2a, 0x0a, 0x0a, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x1a, 0x57, 0x0a, 0x0f, 0x53, 0x6f, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x12, 0x53, 0x6f, 0x6d,
	0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x33, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_test_validator_proto3_map_proto_rawDescOnce sync.Once
	file_test_validator_proto3_map_proto_rawDescData = file_test_validator_proto3_map_proto_rawDesc
)

func file_test_validator_proto3_map_proto_rawDescGZIP() []byte {
	file_test_validator_proto3_map_proto_rawDescOnce.Do(func() {
		file_test_validator_proto3_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_validator_proto3_map_proto_rawDescData)
	})
	return file_test_validator_proto3_map_proto_rawDescData
}

var file_test_validator_proto3_map_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_test_validator_proto3_map_proto_goTypes = []interface{}{
	(*ValueType)(nil),                       // 0: validatortest.ValueType
	(*ValidatorMapMessage3)(nil),            // 1: validatortest.ValidatorMapMessage3
	nil,                                     // 2: validatortest.ValidatorMapMessage3.SomeStringMapEntry
	(*ValidatorMapMessage3_NestedType)(nil), // 3: validatortest.ValidatorMapMessage3.NestedType
	nil,                                     // 4: validatortest.ValidatorMapMessage3.SomeExtMapEntry
	nil,                                     // 5: validatortest.ValidatorMapMessage3.SomeNestedMapEntry
}
var file_test_validator_proto3_map_proto_depIdxs = []int32{
	2, // 0: validatortest.ValidatorMapMessage3.SomeStringMap:type_name -> validatortest.ValidatorMapMessage3.SomeStringMapEntry
	4, // 1: validatortest.ValidatorMapMessage3.SomeExtMap:type_name -> validatortest.ValidatorMapMessage3.SomeExtMapEntry
	5, // 2: validatortest.ValidatorMapMessage3.SomeNestedMap:type_name -> validatortest.ValidatorMapMessage3.SomeNestedMapEntry
	0, // 3: validatortest.ValidatorMapMessage3.SomeExtMapEntry.value:type_name -> validatortest.ValueType
	3, // 4: validatortest.ValidatorMapMessage3.SomeNestedMapEntry.value:type_name -> validatortest.ValidatorMapMessage3.NestedType
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_test_validator_proto3_map_proto_init() }
func file_test_validator_proto3_map_proto_init() {
	if File_test_validator_proto3_map_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_validator_proto3_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_validator_proto3_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorMapMessage3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_validator_proto3_map_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorMapMessage3_NestedType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_validator_proto3_map_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_validator_proto3_map_proto_goTypes,
		DependencyIndexes: file_test_validator_proto3_map_proto_depIdxs,
		MessageInfos:      file_test_validator_proto3_map_proto_msgTypes,
	}.Build()
	File_test_validator_proto3_map_proto = out.File
	file_test_validator_proto3_map_proto_rawDesc = nil
	file_test_validator_proto3_map_proto_goTypes = nil
	file_test_validator_proto3_map_proto_depIdxs = nil
}
