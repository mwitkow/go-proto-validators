// Copyright 2016 Michal Witkowski. All Rights Reserved.
// See LICENSE for licensing terms.

syntax = "proto3";
package validatortest;

import "github.com/mwitkow/go-proto-validators/validators.proto";

// Top-level enum type definition.
enum EnumProto3 {
  alpha3 = 0;
  beta3 = 1;
}

message ValidatorMessage3 {
  // Embedded message test structure.
  message EmbeddedMessage {
    string Identifier = 1 [ (validator.field) = {regex : "^[a-z]{2,5}$"} ];
    int64 SomeValue = 2 [ (validator.field) = {int_gt : 0, int_lt : 100} ];
  }

  // Embedded enum type definition.
  enum EmbeddedEnum {
    zero = 0;
    one = 1;
  }

  // String regex constraint tests.
  string SomeString = 1 [ (validator.field) = {regex : "^.{2,5}$"} ];
  repeated string SomeStringRep = 2
      [ (validator.field) = {regex : "^.{2,5}$"} ];
  string SomeStringNoQuotes = 3
      [ (validator.field) = {regex : "^[^\"]{2,5}$"} ];
  string SomeStringUnescaped = 4 [ (validator.field) = {
    regex : "[\\p{L}\\p{N}]({\\p{L}\\p{N}_- ]{0,28}[\\p{L}\\p{N}])?."
  } ];

  // Strict integer inequality constraint tests.
  uint32 SomeInt = 5 [ (validator.field) = {int_gt : 10} ];
  repeated uint32 SomeIntRep = 6 [ (validator.field) = {int_gt : 10} ];

  // Embedded message existence and recursive constraint tests.
  EmbeddedMessage SomeEmbedded = 7;
  EmbeddedMessage SomeEmbeddedExists = 8
      [ (validator.field) = {msg_exists : true} ];
  repeated EmbeddedMessage SomeEmbeddedRep = 9;

  // Custom error tests.
  int32 CustomErrorInt = 10
      [ (validator.field) = {int_lt : 10, human_error : "My Custom Error"} ];

  // Strict floating-point inequality constraint tests.
  // With this epsilon value, the limits become
  //	SomeFloat+0.05 > 0.35
  // 	SomeFloat-0.05 < 0.65
  double StrictSomeDouble = 11 [
    (validator.field) = {float_gt : 0.35, float_lt : 0.65, float_epsilon : 0.05}
  ];
  repeated double StrictSomeDoubleRep = 12 [
    (validator.field) = {float_gt : 0.35, float_lt : 0.65, float_epsilon : 0.05}
  ];
  repeated double StrictSomeDoubleRepNonNull = 13 [
    (validator.field) = {float_gt : 0.35, float_lt : 0.65, float_epsilon : 0.05}
  ];
  float StrictSomeFloat = 14 [
    (validator.field) = {float_gt : 0.35, float_lt : 0.65, float_epsilon : 0.05}
  ];
  repeated float StrictSomeFloatRep = 15 [
    (validator.field) = {float_gt : 0.35, float_lt : 0.65, float_epsilon : 0.05}
  ];
  repeated float StrictSomeFloatRepNonNull = 16 [
    (validator.field) = {float_gt : 0.35, float_lt : 0.65, float_epsilon : 0.05}
  ];

  // Non-strict floating-point inequality constraint tests.
  double SomeDouble = 17
      [ (validator.field) = {float_gte : 0.25, float_lte : 0.75} ];
  repeated double SomeDoubleRep = 18
      [ (validator.field) = {float_gte : 0.25, float_lte : 0.75} ];
  float SomeFloat = 19
      [ (validator.field) = {float_gte : 0.25, float_lte : 0.75} ];
  repeated float SomeFloatRep = 20
      [ (validator.field) = {float_gte : 0.25, float_lte : 0.75} ];

  // String not-empty constraint tests.
  string SomeNonEmptyString = 21
      [ (validator.field) = {string_not_empty : true} ];

  // Repeated base-type without constraint tests.
  repeated int32 RepeatedBaseType = 22;

  // Repeated element count constraint tests.
  repeated int32 Repeated = 23
      [ (validator.field) = {repeated_count_min : 2, repeated_count_max : 5} ];
  string SomeStringLtReq = 24 [ (validator.field) = {length_gt : 2} ];
  string SomeStringGtReq = 25 [ (validator.field) = {length_lt : 12} ];
  string SomeStringEqReq = 26 [ (validator.field) = {length_eq : 10} ];

  bytes SomeBytesLtReq = 27 [ (validator.field) = {length_gt : 5} ];
  bytes SomeBytesGtReq = 28 [ (validator.field) = {length_lt : 20} ];
  bytes SomeBytesEqReq = 29 [ (validator.field) = {length_eq : 12} ];

  string UUIDAny = 30 [ (validator.field) = {uuid_ver : 0} ];
  string UUID4NotEmpty = 31 [ (validator.field) = {uuid_ver : 4} ];

  // Enum tests.
  EnumProto3 someEnum = 32 [ (validator.field) = {is_in_enum : true} ];
  EmbeddedEnum someEmbeddedEnum = 33
      [ (validator.field) = {is_in_enum : true} ];
}
